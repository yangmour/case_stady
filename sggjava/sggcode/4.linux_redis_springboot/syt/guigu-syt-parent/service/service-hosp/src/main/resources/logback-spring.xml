<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">


    <!--每个logger都关联到logger上下文，默认上下文名称为“default”。
    可以使用contextName标签设置成其他名字，用于区分不同应用程序的记录-->
    <contextName>syt</contextName>

    <!--
    用来定义变量值的标签，property标签有两个属性，name和value；
    其中name的值是变量的名称，value的值是变量定义的值。
    通过property定义的值会被插入到logger上下文中。
    定义变量后，可以使“${name}”来使用变量。
    -->
    <property name="charset" value="UTF-8"></property>
    <!--控制台彩色日志日志格式-->
    <!-- magenta:洋红 -->
    <!-- boldMagenta:粗红-->
    <!-- cyan:青色 -->
    <!-- white:白色 -->
    <!-- magenta:洋红 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%boldMagenta(%date{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %thread %magenta(%file:%line) %green(%logger) - %msg%n"/>

    <!-- 默认的控制台日志输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!--
    根logger，且只有一个level属性，定义日志输出的默认级别
    如果微服务中配置了logging:level:xxx，那么微服务中设置的级别优先
    如果微服务中没有配置日志级别，那么日志按照此处配置的级别输出
    -->
<!--    <root level="info">-->
<!--        &lt;!&ndash;ref：引用appender的name的值&ndash;&gt;-->
<!--        <appender-ref ref="STDOUT"/>-->
<!--    </root>-->



    <!--
      用来定义变量值的标签，property标签有两个属性，name和value；
      其中name的值是变量的名称，value的值是变量定义的值。
      通过property定义的值会被插入到logger上下文中。
      定义变量后，可以使“${name}”来使用变量。
      -->
    <property name="charset" value="UTF-8"></property>

    <!-- 属性文件:在properties文件中找到对应的配置项 -->
    <property name="logging.position"  value="D:/project/syt/logs/"/>
    <springProperty scope="context" name="logging.path"  source="logging.file.path"/>
    <springProperty scope="context" name="logging.level" source="logging.level.root"/>

    <appender name="SYT-LOGGER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${logging.level}</level>
        </filter>
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logging.position}${logging.path}/syt-log.log</file>
        <!--日志文件输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>${charset}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.position}${logging.path}/syt-log-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>


    <!--
    根logger，且只有一个level属性，定义日志输出的默认级别
    如果微服务中配置了logging:level:xxx，那么微服务中设置的级别优先
    如果微服务中没有配置日志级别，那么日志按照此处配置的级别输出
    -->
<!--    <root level="info">-->
<!--        <appender-ref ref="SYT-LOGGER"/>-->
<!--    </root>-->


    <!-- 错误日志 appender ： 按照每天生成日志文件 -->
    <appender name="SYT-ERROR-LOGGER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <!-- 过滤器，只记录 error 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志名称 -->
        <file>${logging.position}${logging.path}/syt-error-log.log</file>
        <!--日志文件输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>${charset}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.position}${logging.path}/syt-error-log-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 开发环境 -->
    <springProfile name="dev">
        <!--
        根logger，且只有一个level属性，定义日志输出的默认级别
        如果微服务中配置了logging:level:xxx，那么微服务中设置的级别优先
        如果微服务中没有配置日志级别，那么日志按照此处配置的级别输出
        -->
        <root level="info">
            <appender-ref ref="STDOUT"/>
        </root>
    </springProfile>

    <!-- 生产环境 -->
    <springProfile name="prod">
        <!--
        用来设置某一个包或者具体的某一个类的日志打印级别以及指定appender。
        -->
        <logger name="com.atguigu.syt" level="${logging.level}" additivity="false">
            <appender-ref ref="SYT-LOGGER" />
            <appender-ref ref="SYT-ERROR-LOGGER" />
        </logger>
    </springProfile>



</configuration>